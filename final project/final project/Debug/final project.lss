
final project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000063c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800060  00800060  000006b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001097  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000731  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f2  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  00002ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3c  00000000  00000000  00003037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003b73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_10>
  2c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 36       	cpi	r26, 0x6D	; 109
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  74:	0c 94 1c 03 	jmp	0x638	; 0x638 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <PWM_Init>:
	}
}


void PWM_Init(){
	DDRD |= (1<<7);                              //set PD7 as PWM output
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	81 bb       	out	0x11, r24	; 17
	

	TCCR2 |= (1<<WGM20)|(1<<WGM21);                //select Fast PWM mode by setting bits
  82:	85 b5       	in	r24, 0x25	; 37
  84:	88 64       	ori	r24, 0x48	; 72
  86:	85 bd       	out	0x25, r24	; 37


	TCCR2 |=(1<<COM21)|(1<<CS20)|(0<<CS21)|(0<<CS22);   //clear OC2 on compare match
  88:	85 b5       	in	r24, 0x25	; 37
  8a:	81 62       	ori	r24, 0x21	; 33
  8c:	85 bd       	out	0x25, r24	; 37
  8e:	08 95       	ret

00000090 <keys_init>:
	
}
void keys_init()
{
	/*KEYS INITIALIZING ON PORT A*/
	MDIO_SETPIN_STATUS(PORTA,PIN0|PIN1|PIN2|PIN3|PIN4|PIN5|PIN6|PIN7,INPUT_FLOAT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	6f ef       	ldi	r22, 0xFF	; 255
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 b2 01 	call	0x364	; 0x364 <MDIO_SETPIN_STATUS>
	/*KEYS VALUES*/
	Z_AXIS_UP=MDIO_GETPIN_VALUE(PORTA,PIN0);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  a2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Z_AXIS_UP>
	Z_AXIS_DOWN=MDIO_GETPIN_VALUE(PORTA,PIN1);
  a6:	62 e0       	ldi	r22, 0x02	; 2
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  ae:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Z_AXIS_DOWN>
	
	BASE_RIGHT=MDIO_GETPIN_VALUE(PORTA,PIN2);
  b2:	64 e0       	ldi	r22, 0x04	; 4
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  ba:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <BASE_RIGHT>
	BASE_LEFT=MDIO_GETPIN_VALUE(PORTA,PIN3);
  be:	68 e0       	ldi	r22, 0x08	; 8
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  c6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <BASE_LEFT>
	
	FEED_UP=MDIO_GETPIN_VALUE(PORTA,PIN4);
  ca:	60 e1       	ldi	r22, 0x10	; 16
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  d2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <FEED_UP>
	FEED_DOWN=MDIO_GETPIN_VALUE(PORTA,PIN5);
  d6:	60 e2       	ldi	r22, 0x20	; 32
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  de:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <FEED_DOWN>
	
	Y_AXIS_RIGHT=MDIO_GETPIN_VALUE(PORTA,PIN6);
  e2:	60 e4       	ldi	r22, 0x40	; 64
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Y_AXIS_LEFT=MDIO_GETPIN_VALUE(PORTA,PIN7);
  ee:	60 e8       	ldi	r22, 0x80	; 128
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 57 02 	call	0x4ae	; 0x4ae <MDIO_GETPIN_VALUE>
  f6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Y_AXIS_LEFT>
  fa:	08 95       	ret

000000fc <relay_ACTIVATE>:
	
	
}

void relay_ACTIVATE(u8_t relay_numb)
{
  fc:	cf 93       	push	r28
  fe:	c8 2f       	mov	r28, r24
	MDIO_SETPIN_STATUS(PORTC,PIN1|PIN2|PIN3|PIN4|PIN5|PIN6,OUTPUT);
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	6e e7       	ldi	r22, 0x7E	; 126
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 b2 01 	call	0x364	; 0x364 <MDIO_SETPIN_STATUS>
	switch(relay_numb)
 10a:	c3 30       	cpi	r28, 0x03	; 3
 10c:	c1 f0       	breq	.+48     	; 0x13e <relay_ACTIVATE+0x42>
 10e:	28 f4       	brcc	.+10     	; 0x11a <relay_ACTIVATE+0x1e>
 110:	c1 30       	cpi	r28, 0x01	; 1
 112:	49 f0       	breq	.+18     	; 0x126 <relay_ACTIVATE+0x2a>
 114:	c2 30       	cpi	r28, 0x02	; 2
 116:	69 f0       	breq	.+26     	; 0x132 <relay_ACTIVATE+0x36>
 118:	29 c0       	rjmp	.+82     	; 0x16c <relay_ACTIVATE+0x70>
 11a:	c5 30       	cpi	r28, 0x05	; 5
 11c:	e1 f0       	breq	.+56     	; 0x156 <relay_ACTIVATE+0x5a>
 11e:	a8 f0       	brcs	.+42     	; 0x14a <relay_ACTIVATE+0x4e>
 120:	c6 30       	cpi	r28, 0x06	; 6
 122:	f9 f0       	breq	.+62     	; 0x162 <relay_ACTIVATE+0x66>
 124:	23 c0       	rjmp	.+70     	; 0x16c <relay_ACTIVATE+0x70>
	{
		case relay_1:
		{
			MDIO_SETPIN_VALUE(PORTC,PIN1,HIGH);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
			break;
 130:	1d c0       	rjmp	.+58     	; 0x16c <relay_ACTIVATE+0x70>
		}
		case relay_2:
		{
			MDIO_SETPIN_VALUE(PORTC,PIN1,HIGH);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
			break;
 13c:	17 c0       	rjmp	.+46     	; 0x16c <relay_ACTIVATE+0x70>

		}
		case relay_3:
		{
			MDIO_SETPIN_VALUE(PORTC,PIN3,HIGH);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	68 e0       	ldi	r22, 0x08	; 8
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
			break;
 148:	11 c0       	rjmp	.+34     	; 0x16c <relay_ACTIVATE+0x70>
		}
		case relay_4:
		{
			MDIO_SETPIN_VALUE(PORTC,PIN4,HIGH);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	60 e1       	ldi	r22, 0x10	; 16
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
			break;
 154:	0b c0       	rjmp	.+22     	; 0x16c <relay_ACTIVATE+0x70>
		}
		case relay_5:
		{
			MDIO_SETPIN_VALUE(PORTC,PIN5,HIGH);
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	60 e2       	ldi	r22, 0x20	; 32
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
			break;
 160:	05 c0       	rjmp	.+10     	; 0x16c <relay_ACTIVATE+0x70>
		}
		case relay_6:
		{
			MDIO_SETPIN_VALUE(PORTC,PIN6,HIGH);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	60 e4       	ldi	r22, 0x40	; 64
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
			break;
		}
	}
}
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <motor_init>:
void motor_init(u8_t status,u8_t Motor)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	c8 2f       	mov	r28, r24
 176:	d6 2f       	mov	r29, r22
	MDIO_SETPIN_STATUS(PORTD,PIN0|PIN1|PIN2|PIN3|PIN4|PIN5|PIN6|PIN7,OUTPUT);
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	6f ef       	ldi	r22, 0xFF	; 255
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	0e 94 b2 01 	call	0x364	; 0x364 <MDIO_SETPIN_STATUS>
	
	if (status==idle_state)
 182:	c1 11       	cpse	r28, r1
 184:	06 c0       	rjmp	.+12     	; 0x192 <motor_init+0x22>
	{
		MDIO_SETPIN_VALUE(PORTD,PIN0|PIN1|PIN2|PIN3|PIN4|PIN5|PIN6|PIN7,LOW);
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	6f ef       	ldi	r22, 0xFF	; 255
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
 190:	71 c0       	rjmp	.+226    	; 0x274 <motor_init+0x104>
	}
	else if (status==start_state)
 192:	c1 30       	cpi	r28, 0x01	; 1
 194:	b9 f5       	brne	.+110    	; 0x204 <motor_init+0x94>
	{
		switch(Motor)
 196:	d2 30       	cpi	r29, 0x02	; 2
 198:	a1 f0       	breq	.+40     	; 0x1c2 <motor_init+0x52>
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <motor_init+0x32>
 19c:	d1 30       	cpi	r29, 0x01	; 1
 19e:	31 f0       	breq	.+12     	; 0x1ac <motor_init+0x3c>
 1a0:	69 c0       	rjmp	.+210    	; 0x274 <motor_init+0x104>
 1a2:	d3 30       	cpi	r29, 0x03	; 3
 1a4:	c9 f0       	breq	.+50     	; 0x1d8 <motor_init+0x68>
 1a6:	d4 30       	cpi	r29, 0x04	; 4
 1a8:	11 f1       	breq	.+68     	; 0x1ee <motor_init+0x7e>
 1aa:	64 c0       	rjmp	.+200    	; 0x274 <motor_init+0x104>
		{
			case Z_AXIS_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN0,HIGH);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN1,LOW);
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
 1c0:	59 c0       	rjmp	.+178    	; 0x274 <motor_init+0x104>
			}
			case BASE_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN2,HIGH);
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN3,LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	68 e0       	ldi	r22, 0x08	; 8
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
 1d6:	4e c0       	rjmp	.+156    	; 0x274 <motor_init+0x104>
			}
			case FEED_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN4,HIGH);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	60 e1       	ldi	r22, 0x10	; 16
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN5,LOW);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	60 e2       	ldi	r22, 0x20	; 32
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
 1ec:	43 c0       	rjmp	.+134    	; 0x274 <motor_init+0x104>
			}
			case Y_AXIS_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN5,HIGH);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	60 e2       	ldi	r22, 0x20	; 32
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN6,LOW);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	60 e4       	ldi	r22, 0x40	; 64
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
 202:	38 c0       	rjmp	.+112    	; 0x274 <motor_init+0x104>
			}
		}
	}
	else if (status==stop_state)
 204:	c2 30       	cpi	r28, 0x02	; 2
 206:	b1 f5       	brne	.+108    	; 0x274 <motor_init+0x104>
	{
		switch(Motor)
 208:	d2 30       	cpi	r29, 0x02	; 2
 20a:	a1 f0       	breq	.+40     	; 0x234 <motor_init+0xc4>
 20c:	18 f4       	brcc	.+6      	; 0x214 <motor_init+0xa4>
 20e:	d1 30       	cpi	r29, 0x01	; 1
 210:	31 f0       	breq	.+12     	; 0x21e <motor_init+0xae>
 212:	30 c0       	rjmp	.+96     	; 0x274 <motor_init+0x104>
 214:	d3 30       	cpi	r29, 0x03	; 3
 216:	c9 f0       	breq	.+50     	; 0x24a <motor_init+0xda>
 218:	d4 30       	cpi	r29, 0x04	; 4
 21a:	11 f1       	breq	.+68     	; 0x260 <motor_init+0xf0>
 21c:	2b c0       	rjmp	.+86     	; 0x274 <motor_init+0x104>
		{
			case Z_AXIS_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN0,LOW);
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN1,LOW);
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
 232:	20 c0       	rjmp	.+64     	; 0x274 <motor_init+0x104>
			}
			case BASE_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN2,LOW);
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN3,LOW);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	68 e0       	ldi	r22, 0x08	; 8
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
 248:	15 c0       	rjmp	.+42     	; 0x274 <motor_init+0x104>
			}
			case FEED_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN4,LOW);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	60 e1       	ldi	r22, 0x10	; 16
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN5,LOW);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	60 e2       	ldi	r22, 0x20	; 32
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
 25e:	0a c0       	rjmp	.+20     	; 0x274 <motor_init+0x104>
			}
			case Y_AXIS_M:
			{
				MDIO_SETPIN_VALUE(PORTD,PIN5,LOW);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	60 e2       	ldi	r22, 0x20	; 32
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				MDIO_SETPIN_VALUE(PORTD,PIN6,LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e4       	ldi	r22, 0x40	; 64
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
				break;
			}
		}
	}

}	
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <main>:


int main(void)
{
	
	MDIO_SETPIN_STATUS(PORTB,PIN1|PIN3,OUTPUT);      //SETTING THE OC0 AND DIRECTION FOR CYTRON
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	6a e0       	ldi	r22, 0x0A	; 10
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 b2 01 	call	0x364	; 0x364 <MDIO_SETPIN_STATUS>
	
	TIMER0_INITIALIZE(PWM_PHASE,NO_PRESCALE);		//OC0 PWM
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 7d 02 	call	0x4fa	; 0x4fa <TIMER0_INITIALIZE>
	
	PWM_Init();								// OC2 PWM
 28c:	0e 94 3e 00 	call	0x7c	; 0x7c <PWM_Init>
	
	

	motor_init(idle_state,BASE_M);
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
	OCR2=255*.21;
 298:	85 e3       	ldi	r24, 0x35	; 53
 29a:	83 bd       	out	0x23, r24	; 35
	TIMER0_INITIALIZE(PWM_PHASE,NO_PRESCALE);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <TIMER0_INITIALIZE>
	TIMER0_PWM_SETUP(PWM_NON_INVERT,255*.7);
 2a4:	62 eb       	ldi	r22, 0xB2	; 178
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER0_PWM_SETUP>
	while (1)
	{
					
		/*INITIALIZING THE PWM SIGNALS*/					
		TIMER0_PWM_SETUP(PWM_NON_INVERT,255*.7);
 2ac:	62 eb       	ldi	r22, 0xB2	; 178
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 b9 02 	call	0x572	; 0x572 <TIMER0_PWM_SETUP>
	
		/*GETTING THE VALUES OF THE SWITCHES*/
		keys_init();
 2b4:	0e 94 48 00 	call	0x90	; 0x90 <keys_init>
		
		if (Z_AXIS_UP==1)
 2b8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Z_AXIS_UP>
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	41 f4       	brne	.+16     	; 0x2d0 <main+0x56>
		{
			motor_init(start_state,Z_AXIS_M);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
			MDIO_SETPIN_VALUE(PORTB,PIN1,HIGH);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
		}
		if (Z_AXIS_DOWN==1)
 2d0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Z_AXIS_DOWN>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	41 f4       	brne	.+16     	; 0x2e8 <main+0x6e>
		{
			motor_init(start_state,Z_AXIS_M);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
			MDIO_SETPIN_VALUE(PORTB,PIN1,LOW);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_SETPIN_VALUE>
		}
		if(BASE_RIGHT==1)
 2e8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <BASE_RIGHT>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <main+0x7c>
		{
			motor_init(start_state,BASE_M);
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
		}
		if (BASE_LEFT==1)
 2f6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <BASE_LEFT>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	49 f4       	brne	.+18     	; 0x310 <main+0x96>
		{
			motor_init(start_state,BASE_M);
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
			relay_ACTIVATE(relay_1);
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 7e 00 	call	0xfc	; 0xfc <relay_ACTIVATE>
			relay_ACTIVATE(relay_2);
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 7e 00 	call	0xfc	; 0xfc <relay_ACTIVATE>
		}
		if (FEED_UP==1)
 310:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <FEED_UP>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	19 f4       	brne	.+6      	; 0x31e <main+0xa4>
		{
			motor_init(start_state,FEED_M);
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
		}
		if(FEED_DOWN==1)
 31e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <FEED_DOWN>
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	49 f4       	brne	.+18     	; 0x338 <main+0xbe>
		{
			motor_init(start_state,FEED_M);
 326:	63 e0       	ldi	r22, 0x03	; 3
 328:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
			relay_ACTIVATE(relay_3);
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	0e 94 7e 00 	call	0xfc	; 0xfc <relay_ACTIVATE>
			relay_ACTIVATE(relay_4);
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	0e 94 7e 00 	call	0xfc	; 0xfc <relay_ACTIVATE>
		}
		if(Y_AXIS_RIGHT==1)
 338:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	19 f4       	brne	.+6      	; 0x346 <main+0xcc>
		{
			motor_init(start_state,Y_AXIS_M);
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
		}
		if(Y_AXIS_LEFT==1)
 346:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Y_AXIS_LEFT>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	09 f0       	breq	.+2      	; 0x350 <main+0xd6>
 34e:	ae cf       	rjmp	.-164    	; 0x2ac <main+0x32>
		{
			motor_init(start_state,Y_AXIS_M);
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	0e 94 b8 00 	call	0x170	; 0x170 <motor_init>
			relay_ACTIVATE(relay_5);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	0e 94 7e 00 	call	0xfc	; 0xfc <relay_ACTIVATE>
			relay_ACTIVATE(relay_6);
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 7e 00 	call	0xfc	; 0xfc <relay_ACTIVATE>
 362:	a4 cf       	rjmp	.-184    	; 0x2ac <main+0x32>

00000364 <MDIO_SETPIN_STATUS>:

        break;
    /*incase of portD*/
    case PORTD:

        MDIO_PORTD ^= au8_pin; /*TOGGLEING THE PIN VALUE*/
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	f9 f0       	breq	.+62     	; 0x3a6 <MDIO_SETPIN_STATUS+0x42>
 368:	30 f0       	brcs	.+12     	; 0x376 <MDIO_SETPIN_STATUS+0x12>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	a1 f1       	breq	.+104    	; 0x3d6 <MDIO_SETPIN_STATUS+0x72>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	09 f4       	brne	.+2      	; 0x374 <MDIO_SETPIN_STATUS+0x10>
 372:	49 c0       	rjmp	.+146    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 374:	08 95       	ret
 376:	41 30       	cpi	r20, 0x01	; 1
 378:	41 f0       	breq	.+16     	; 0x38a <MDIO_SETPIN_STATUS+0x26>
 37a:	18 f0       	brcs	.+6      	; 0x382 <MDIO_SETPIN_STATUS+0x1e>
 37c:	42 30       	cpi	r20, 0x02	; 2
 37e:	51 f0       	breq	.+20     	; 0x394 <MDIO_SETPIN_STATUS+0x30>
 380:	08 95       	ret
 382:	8a b3       	in	r24, 0x1a	; 26
 384:	68 2b       	or	r22, r24
 386:	6a bb       	out	0x1a, r22	; 26
 388:	08 95       	ret
 38a:	8a b3       	in	r24, 0x1a	; 26
 38c:	60 95       	com	r22
 38e:	68 23       	and	r22, r24
 390:	6a bb       	out	0x1a, r22	; 26
 392:	08 95       	ret
 394:	8a b3       	in	r24, 0x1a	; 26
 396:	96 2f       	mov	r25, r22
 398:	90 95       	com	r25
 39a:	89 23       	and	r24, r25
 39c:	8a bb       	out	0x1a, r24	; 26
 39e:	8b b3       	in	r24, 0x1b	; 27
 3a0:	68 2b       	or	r22, r24
 3a2:	6b bb       	out	0x1b, r22	; 27
 3a4:	08 95       	ret
 3a6:	41 30       	cpi	r20, 0x01	; 1
 3a8:	41 f0       	breq	.+16     	; 0x3ba <MDIO_SETPIN_STATUS+0x56>
 3aa:	18 f0       	brcs	.+6      	; 0x3b2 <MDIO_SETPIN_STATUS+0x4e>
 3ac:	42 30       	cpi	r20, 0x02	; 2
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <MDIO_SETPIN_STATUS+0x60>
 3b0:	08 95       	ret
 3b2:	87 b3       	in	r24, 0x17	; 23
 3b4:	68 2b       	or	r22, r24
 3b6:	67 bb       	out	0x17, r22	; 23
 3b8:	08 95       	ret
 3ba:	87 b3       	in	r24, 0x17	; 23
 3bc:	60 95       	com	r22
 3be:	68 23       	and	r22, r24
 3c0:	67 bb       	out	0x17, r22	; 23
 3c2:	08 95       	ret
 3c4:	87 b3       	in	r24, 0x17	; 23
 3c6:	96 2f       	mov	r25, r22
 3c8:	90 95       	com	r25
 3ca:	89 23       	and	r24, r25
 3cc:	87 bb       	out	0x17, r24	; 23
 3ce:	88 b3       	in	r24, 0x18	; 24
 3d0:	68 2b       	or	r22, r24
 3d2:	68 bb       	out	0x18, r22	; 24
 3d4:	08 95       	ret
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	41 f0       	breq	.+16     	; 0x3ea <MDIO_SETPIN_STATUS+0x86>
 3da:	18 f0       	brcs	.+6      	; 0x3e2 <MDIO_SETPIN_STATUS+0x7e>
 3dc:	42 30       	cpi	r20, 0x02	; 2
 3de:	51 f0       	breq	.+20     	; 0x3f4 <MDIO_SETPIN_STATUS+0x90>
 3e0:	08 95       	ret
 3e2:	84 b3       	in	r24, 0x14	; 20
 3e4:	68 2b       	or	r22, r24
 3e6:	64 bb       	out	0x14, r22	; 20
 3e8:	08 95       	ret
 3ea:	84 b3       	in	r24, 0x14	; 20
 3ec:	60 95       	com	r22
 3ee:	68 23       	and	r22, r24
 3f0:	64 bb       	out	0x14, r22	; 20
 3f2:	08 95       	ret
 3f4:	84 b3       	in	r24, 0x14	; 20
 3f6:	96 2f       	mov	r25, r22
 3f8:	90 95       	com	r25
 3fa:	89 23       	and	r24, r25
 3fc:	84 bb       	out	0x14, r24	; 20
 3fe:	85 b3       	in	r24, 0x15	; 21
 400:	68 2b       	or	r22, r24
 402:	65 bb       	out	0x15, r22	; 21
 404:	08 95       	ret
 406:	41 30       	cpi	r20, 0x01	; 1
 408:	41 f0       	breq	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 40a:	18 f0       	brcs	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40c:	42 30       	cpi	r20, 0x02	; 2
 40e:	51 f0       	breq	.+20     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 410:	08 95       	ret
 412:	81 b3       	in	r24, 0x11	; 17
 414:	68 2b       	or	r22, r24
 416:	61 bb       	out	0x11, r22	; 17
 418:	08 95       	ret
 41a:	81 b3       	in	r24, 0x11	; 17
 41c:	60 95       	com	r22
 41e:	68 23       	and	r22, r24
 420:	61 bb       	out	0x11, r22	; 17
 422:	08 95       	ret
 424:	81 b3       	in	r24, 0x11	; 17
 426:	96 2f       	mov	r25, r22
 428:	90 95       	com	r25
 42a:	89 23       	and	r24, r25
 42c:	81 bb       	out	0x11, r24	; 17
 42e:	82 b3       	in	r24, 0x12	; 18
 430:	68 2b       	or	r22, r24
 432:	62 bb       	out	0x12, r22	; 18
 434:	08 95       	ret

00000436 <MDIO_SETPIN_VALUE>:
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	99 f0       	breq	.+38     	; 0x460 <MDIO_SETPIN_VALUE+0x2a>
 43a:	28 f0       	brcs	.+10     	; 0x446 <MDIO_SETPIN_VALUE+0x10>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	e9 f0       	breq	.+58     	; 0x47a <MDIO_SETPIN_VALUE+0x44>
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	41 f1       	breq	.+80     	; 0x494 <MDIO_SETPIN_VALUE+0x5e>
 444:	08 95       	ret
 446:	44 23       	and	r20, r20
 448:	31 f0       	breq	.+12     	; 0x456 <MDIO_SETPIN_VALUE+0x20>
 44a:	41 30       	cpi	r20, 0x01	; 1
 44c:	79 f5       	brne	.+94     	; 0x4ac <MDIO_SETPIN_VALUE+0x76>
 44e:	8b b3       	in	r24, 0x1b	; 27
 450:	68 2b       	or	r22, r24
 452:	6b bb       	out	0x1b, r22	; 27
 454:	08 95       	ret
 456:	8b b3       	in	r24, 0x1b	; 27
 458:	60 95       	com	r22
 45a:	68 23       	and	r22, r24
 45c:	6b bb       	out	0x1b, r22	; 27
 45e:	08 95       	ret
 460:	44 23       	and	r20, r20
 462:	31 f0       	breq	.+12     	; 0x470 <MDIO_SETPIN_VALUE+0x3a>
 464:	41 30       	cpi	r20, 0x01	; 1
 466:	11 f5       	brne	.+68     	; 0x4ac <MDIO_SETPIN_VALUE+0x76>
 468:	88 b3       	in	r24, 0x18	; 24
 46a:	68 2b       	or	r22, r24
 46c:	68 bb       	out	0x18, r22	; 24
 46e:	08 95       	ret
 470:	88 b3       	in	r24, 0x18	; 24
 472:	60 95       	com	r22
 474:	68 23       	and	r22, r24
 476:	68 bb       	out	0x18, r22	; 24
 478:	08 95       	ret
 47a:	44 23       	and	r20, r20
 47c:	31 f0       	breq	.+12     	; 0x48a <MDIO_SETPIN_VALUE+0x54>
 47e:	41 30       	cpi	r20, 0x01	; 1
 480:	a9 f4       	brne	.+42     	; 0x4ac <MDIO_SETPIN_VALUE+0x76>
 482:	85 b3       	in	r24, 0x15	; 21
 484:	68 2b       	or	r22, r24
 486:	65 bb       	out	0x15, r22	; 21
 488:	08 95       	ret
 48a:	85 b3       	in	r24, 0x15	; 21
 48c:	60 95       	com	r22
 48e:	68 23       	and	r22, r24
 490:	65 bb       	out	0x15, r22	; 21
 492:	08 95       	ret
 494:	44 23       	and	r20, r20
 496:	31 f0       	breq	.+12     	; 0x4a4 <MDIO_SETPIN_VALUE+0x6e>
 498:	41 30       	cpi	r20, 0x01	; 1
 49a:	41 f4       	brne	.+16     	; 0x4ac <MDIO_SETPIN_VALUE+0x76>
 49c:	82 b3       	in	r24, 0x12	; 18
 49e:	68 2b       	or	r22, r24
 4a0:	62 bb       	out	0x12, r22	; 18
 4a2:	08 95       	ret
 4a4:	82 b3       	in	r24, 0x12	; 18
 4a6:	60 95       	com	r22
 4a8:	68 23       	and	r22, r24
 4aa:	62 bb       	out	0x12, r22	; 18
 4ac:	08 95       	ret

000004ae <MDIO_GETPIN_VALUE>:

u8_t MDIO_GETPIN_VALUE(u8_t au8_port, u8_t au8_pin)
{
    u8_t au8_pinvalue = 0; /*creating a variable to carry the value of the pin*/

    switch (au8_port)
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	59 f0       	breq	.+22     	; 0x4c8 <MDIO_GETPIN_VALUE+0x1a>
 4b2:	28 f0       	brcs	.+10     	; 0x4be <MDIO_GETPIN_VALUE+0x10>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	69 f0       	breq	.+26     	; 0x4d2 <MDIO_GETPIN_VALUE+0x24>
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	81 f0       	breq	.+32     	; 0x4dc <MDIO_GETPIN_VALUE+0x2e>
 4bc:	14 c0       	rjmp	.+40     	; 0x4e6 <MDIO_GETPIN_VALUE+0x38>
    {
    /*INCASE OF PORT A*/
    case PORTA:
        if (MDIO_PINA & au8_pin) // the value is 1
 4be:	89 b3       	in	r24, 0x19	; 25
 4c0:	68 23       	and	r22, r24
 4c2:	99 f0       	breq	.+38     	; 0x4ea <MDIO_GETPIN_VALUE+0x3c>
        {
            au8_pinvalue = HIGH;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret

        break;

    /*INCASE OF PORT B*/
    case PORTB:
        if (MDIO_PINB & au8_pin) // the value is 1
 4c8:	86 b3       	in	r24, 0x16	; 22
 4ca:	68 23       	and	r22, r24
 4cc:	81 f0       	breq	.+32     	; 0x4ee <MDIO_GETPIN_VALUE+0x40>
        {
            au8_pinvalue = HIGH;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	08 95       	ret

        break;

    /*INCASE OF PORT C*/
    case PORTC:
        if (MDIO_PINC & au8_pin) // the value is 1
 4d2:	83 b3       	in	r24, 0x13	; 19
 4d4:	68 23       	and	r22, r24
 4d6:	69 f0       	breq	.+26     	; 0x4f2 <MDIO_GETPIN_VALUE+0x44>
        {
            au8_pinvalue = HIGH;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	08 95       	ret

        break;

    /*INCASE OF PORT D*/
    case PORTD:
        if (MDIO_PIND & au8_pin) // the value is 1
 4dc:	80 b3       	in	r24, 0x10	; 16
 4de:	68 23       	and	r22, r24
 4e0:	51 f0       	breq	.+20     	; 0x4f6 <MDIO_GETPIN_VALUE+0x48>
        {
            au8_pinvalue = HIGH;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret
    return;
}

u8_t MDIO_GETPIN_VALUE(u8_t au8_port, u8_t au8_pin)
{
    u8_t au8_pinvalue = 0; /*creating a variable to carry the value of the pin*/
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
        if (MDIO_PINA & au8_pin) // the value is 1
        {
            au8_pinvalue = HIGH;
        }
        else
            au8_pinvalue = LOW; // the value is 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
        if (MDIO_PINB & au8_pin) // the value is 1
        {
            au8_pinvalue = HIGH;
        }
        else
            au8_pinvalue = LOW; // the value is 0
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	08 95       	ret
        if (MDIO_PINC & au8_pin) // the value is 1
        {
            au8_pinvalue = HIGH;
        }
        else
            au8_pinvalue = LOW; // the value is 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
        if (MDIO_PIND & au8_pin) // the value is 1
        {
            au8_pinvalue = HIGH;
        }
        else
            au8_pinvalue = LOW; // the value is 0
 4f6:	80 e0       	ldi	r24, 0x00	; 0

        break;
    }

    return au8_pinvalue;
}
 4f8:	08 95       	ret

000004fa <TIMER0_INITIALIZE>:
	/*RESETING THE DELAY COUNTER*/
	delay_counter=0;
	
	/*TURNING OFF THE TIMER*/
	TIMER_TCCR0=0;
}
 4fa:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <prescaler_value>
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	b1 f0       	breq	.+44     	; 0x52e <TIMER0_INITIALIZE+0x34>
 502:	18 f4       	brcc	.+6      	; 0x50a <TIMER0_INITIALIZE+0x10>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	31 f0       	breq	.+12     	; 0x514 <TIMER0_INITIALIZE+0x1a>
 508:	26 c0       	rjmp	.+76     	; 0x556 <TIMER0_INITIALIZE+0x5c>
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	b9 f0       	breq	.+46     	; 0x53c <TIMER0_INITIALIZE+0x42>
 50e:	84 30       	cpi	r24, 0x04	; 4
 510:	e1 f0       	breq	.+56     	; 0x54a <TIMER0_INITIALIZE+0x50>
 512:	21 c0       	rjmp	.+66     	; 0x556 <TIMER0_INITIALIZE+0x5c>
 514:	83 b7       	in	r24, 0x33	; 51
 516:	8f 7b       	andi	r24, 0xBF	; 191
 518:	83 bf       	out	0x33, r24	; 51
 51a:	83 b7       	in	r24, 0x33	; 51
 51c:	87 7f       	andi	r24, 0xF7	; 247
 51e:	83 bf       	out	0x33, r24	; 51
 520:	83 b7       	in	r24, 0x33	; 51
 522:	8f 7e       	andi	r24, 0xEF	; 239
 524:	83 bf       	out	0x33, r24	; 51
 526:	83 b7       	in	r24, 0x33	; 51
 528:	8f 7d       	andi	r24, 0xDF	; 223
 52a:	83 bf       	out	0x33, r24	; 51
 52c:	14 c0       	rjmp	.+40     	; 0x556 <TIMER0_INITIALIZE+0x5c>
 52e:	83 b7       	in	r24, 0x33	; 51
 530:	80 64       	ori	r24, 0x40	; 64
 532:	83 bf       	out	0x33, r24	; 51
 534:	83 b7       	in	r24, 0x33	; 51
 536:	87 7f       	andi	r24, 0xF7	; 247
 538:	83 bf       	out	0x33, r24	; 51
 53a:	0d c0       	rjmp	.+26     	; 0x556 <TIMER0_INITIALIZE+0x5c>
 53c:	83 b7       	in	r24, 0x33	; 51
 53e:	8f 7b       	andi	r24, 0xBF	; 191
 540:	83 bf       	out	0x33, r24	; 51
 542:	83 b7       	in	r24, 0x33	; 51
 544:	88 60       	ori	r24, 0x08	; 8
 546:	83 bf       	out	0x33, r24	; 51
 548:	06 c0       	rjmp	.+12     	; 0x556 <TIMER0_INITIALIZE+0x5c>
 54a:	83 b7       	in	r24, 0x33	; 51
 54c:	80 64       	ori	r24, 0x40	; 64
 54e:	83 bf       	out	0x33, r24	; 51
 550:	83 b7       	in	r24, 0x33	; 51
 552:	88 60       	ori	r24, 0x08	; 8
 554:	83 bf       	out	0x33, r24	; 51
 556:	8f b7       	in	r24, 0x3f	; 63
 558:	80 68       	ori	r24, 0x80	; 128
 55a:	8f bf       	out	0x3f, r24	; 63
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	68 e0       	ldi	r22, 0x08	; 8
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 b2 01 	call	0x364	; 0x364 <MDIO_SETPIN_STATUS>
 566:	93 b7       	in	r25, 0x33	; 51
 568:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prescaler_value>
 56c:	89 2b       	or	r24, r25
 56e:	83 bf       	out	0x33, r24	; 51
 570:	08 95       	ret

00000572 <TIMER0_PWM_SETUP>:
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	41 f4       	brne	.+16     	; 0x586 <TIMER0_PWM_SETUP+0x14>
 576:	83 b7       	in	r24, 0x33	; 51
 578:	8f 7e       	andi	r24, 0xEF	; 239
 57a:	83 bf       	out	0x33, r24	; 51
 57c:	83 b7       	in	r24, 0x33	; 51
 57e:	80 62       	ori	r24, 0x20	; 32
 580:	83 bf       	out	0x33, r24	; 51
 582:	6c bf       	out	0x3c, r22	; 60
 584:	08 95       	ret
 586:	83 30       	cpi	r24, 0x03	; 3
 588:	41 f4       	brne	.+16     	; 0x59a <TIMER0_PWM_SETUP+0x28>
 58a:	83 b7       	in	r24, 0x33	; 51
 58c:	80 61       	ori	r24, 0x10	; 16
 58e:	83 bf       	out	0x33, r24	; 51
 590:	83 b7       	in	r24, 0x33	; 51
 592:	80 62       	ori	r24, 0x20	; 32
 594:	83 bf       	out	0x33, r24	; 51
 596:	60 95       	com	r22
 598:	6c bf       	out	0x3c, r22	; 60
 59a:	08 95       	ret

0000059c <__vector_10>:
									/*							ISR IMPLEMENTATION                          */
									/************************************************************************/

void __vector_10 (void) __attribute__ ((signal));
void __vector_10 (void)
{
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	2f 93       	push	r18
 5a8:	3f 93       	push	r19
 5aa:	4f 93       	push	r20
 5ac:	5f 93       	push	r21
 5ae:	6f 93       	push	r22
 5b0:	7f 93       	push	r23
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	af 93       	push	r26
 5b8:	bf 93       	push	r27
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
	COMP_PTR();					//CALLING THE INTERRUPT FUNCTION FOR THE COMPARE MATCH MODE
 5be:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <COMP_PTR>
 5c2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <COMP_PTR+0x1>
 5c6:	09 95       	icall
}
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__vector_11>:
void __vector_11 (void)	__attribute__((signal));
void __vector_11 (void)
{
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	4f 93       	push	r20
 5fa:	5f 93       	push	r21
 5fc:	6f 93       	push	r22
 5fe:	7f 93       	push	r23
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	ef 93       	push	r30
 60a:	ff 93       	push	r31
	NORM_PTR();					//CALLING THE INTERRUPT FUNCTION FOR THE NORMAL MODE
 60c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <NORM_PTR>
 610:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <NORM_PTR+0x1>
 614:	09 95       	icall

}
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <_exit>:
 638:	f8 94       	cli

0000063a <__stop_program>:
 63a:	ff cf       	rjmp	.-2      	; 0x63a <__stop_program>
